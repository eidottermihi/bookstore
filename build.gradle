import org.gradle.api.Project;

task wrapper(type: Wrapper) { gradleVersion = '2.1' }

allprojects { apply from: "$rootDir/gradle/version.gradle" }

subprojects {

  apply plugin: 'java'

  apply plugin: 'jacoco'

  apply plugin: 'checkstyle'

  apply plugin: 'findbugs'

  apply plugin: 'pmd'

  apply plugin: 'sonar-runner'

  repositories { mavenCentral() }

  dependencies {
    compile 'org.springframework:spring-context:4.1.1.RELEASE'
    compile 'org.springframework:spring-test:4.1.1.RELEASE'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:slf4j-log4j12:1.7.7'

    testCompile 'junit:junit:4.11'
  }

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  sourceSets {
    integrationTest {
      java.srcDir file("src/integTest/java")
      resources.srcDir file("src/integTest/resources")
      compileClasspath = sourceSets.main.output + configurations.testRuntime
      runtimeClasspath = output + compileClasspath
    }

    acceptanceTest {
      java.srcDir file("src/acceptanceTest/java")
      resources.srcDir file("src/acceptanceTest/resources")
      compileClasspath = sourceSets.main.output + configurations.testRuntime
      runtimeClasspath = output + compileClasspath
    }
  }

  task integrationTest(type: Test){
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.junitXml.destination = "$buildDir/integrationTest-results"
    reports.html.destination = "$buildDir/reports/integrationTest"
    forkEvery 1
    beforeTest { descr ->
      logger.warn("Starting IntegrationTest ${descr.className} : ${descr.name}")
    }
  }

  task testJenkins(dependsOn: test) {
    description '=== Update the timestamp of the test results also if UP-TO-DATE ==='
    doLast{
      def timestamp = System.currentTimeMillis()
      if(testResultsDir.exists()){
        testResultsDir.eachFile { it.lastModified = timestamp }
      }
    }
    check.dependsOn(testJenkins)
  }

  checkstyle {
    configFile = new File(rootDir, 'config/checkstyle/checkstyle.xml')
    toolVersion = '6.0'
    ignoreFailures true
  }

  findbugs { ignoreFailures true }

  pmd {ignoreFailures true}

  test{
    forkEvery 1
    beforeTest { descr ->
      logger.warn("Starting Test ${descr.className} : ${descr.name}")
    }
  }

  sonarRunner {
    sonarProperties {
      property "sonar.host.url", "http://localhost:9000"
      property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar"
      property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
      property "sonar.jdbc.username", "sonar"
      property "sonar.jdbc.password", "123qwe"
    }
  }
}

task loadConfiguration {
  // lookup environment property, default to "test"
  def env = project.hasProperty("env") ? project.getProperty("env") : "test"
  println "Loading configuration for environment '$env'...."
  def configFile = file("$rootDir/gradle/environment.groovy")
  def parsedConfig = new ConfigSlurper(env).parse(configFile.toURL())

  allprojects { ext.config = parsedConfig }
}

task printConfiguration {
  doLast {
    println "server.hostname: '$config.server.hostname'"
    println "server.port: '$config.server.port'"
  }
}

