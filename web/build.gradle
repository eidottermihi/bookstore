import java.io.File;

import org.gradle.api.DefaultTask;
import org.gradle.api.tasks.Input;
import org.gradle.api.tasks.OutputFile;
import org.gradle.api.tasks.TaskAction;

apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'

apply plugin: 'maven-publish'

buildscript {
  repositories {
      jcenter()
  }

  dependencies {
      classpath 'com.bmuschko:gradle-tomcat-plugin:2.0'
  }
}

dependencies {

  compile project(':service')

  compile 'org.apache.wicket:wicket:6.17.0'
  compile 'org.apache.wicket:wicket-spring:6.17.0'
  compile 'org.springframework:spring-web:4.1.1.RELEASE'
  
  compile 'org.seleniumhq.selenium:selenium-java:2.44.0'
  compile 'org.seleniumhq.selenium:selenium-firefox-driver:2.44.0'

  def tomcatVersion = '7.0.56'
  tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
      "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
  tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
    exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
  }
}

sourceSets {
  main {
    java { srcDir 'src/main/java' }
    resources {
      srcDir 'src/main/resources'
      // damit .html-Templates bei Wicket-Page liegen k√∂nnen
      srcDir 'src/main/java'
    }
  }
}

tomcat {
  httpPort 10080
  httpsPort 10081
  stopPort 10082
  users {
    user {
      username = 'tomcat'
      password = 's3cret'
      roles = ['manager']
    }
  }
}


task addBuildInfo {
  doLast {
    def buildInfoFile = new File("$buildDir/buildInfo.properties")
    Properties props = new Properties()
    props.put("version", project.version.toString())
    props.put("timestamp", project.buildTimestamp)
    props.store(buildInfoFile.newWriter(), null)
  }
  // damit buildDir vorhanden ist
  dependsOn classes
}

war {
  dependsOn addBuildInfo
  baseName = "web"

  from (buildDir) {
    include 'buildInfo.properties'
    into('WEB-INF/classes')
  }
}


ext.fullRepoUrl = "$config.binaryRepository.url/$config.binaryRepository.name"


publishing {

  publications {
    webApp(MavenPublication) { from components.web }
  }

  repositories {
    maven {
      url fullRepoUrl
      credentials {
        username = config.binaryRepository.username
        password = config.binaryRepository.password
      }
    }
  }
}

// Binary von Artifactory laden
ext.downloadedArtifact = file("$buildDir/download/$war.archiveName")

task downloadArtifact(type: BinaryDownload) {
  ext {
    repoPath = project.group.replaceAll("\\.", "/")
    repoBaseArtifactName = 'web'
    repoVersion = project.version.toString()
    repoArtifact = war.archiveName
    binaryUrl = "${config.binaryRepository.url}/simple/${config.binaryRepository.name}/${repoPath}/${repoBaseArtifactName}/${repoVersion}/${repoArtifact}"
  }

  sourceUrl = binaryUrl
  targetBinary = downloadedArtifact
}

class BinaryDownload extends DefaultTask {
  @Input
  String sourceUrl
  @OutputFile
  File targetBinary
  @TaskAction
  void download() {
    ant.get(src: sourceUrl, dest: targetBinary)
  }
}

// Deployment mit Cargo


